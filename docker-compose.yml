version: "3.9"

services:
  ###################################################################
  # REVERSE PROXY (Traefik)
  ###################################################################
  reverse-proxy:
    image: traefik:v2.11
    container_name: traefik
    ports:
      - "80:80"      # HTTP sur localhost
      - "8080:8080"  # Dashboard => http://localhost:8080
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      # Dashboard direct sur :8080, pas besoin d'autres labels

  ###################################################################
  # SERVEUR STATIQUE (Nginx) sur la racine "/"
  ###################################################################
  static_server:
    build:
      context: ./static_server
      dockerfile: Dockerfile
    expose:
      - "80"  # interne
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      # Tout ce qui ne matche pas /api ira sur ce conteneur
      - "traefik.http.routers.static.rule=PathPrefix(`/`)"
      - "traefik.http.routers.static.entrypoints=web"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      # Priorité 1 (donc /api prime sur statique)
      - "traefik.http.routers.static.priority=1"

  ###################################################################
  # API (Spring Boot + Javalin), route "/api"
  ###################################################################
  api:
    build:
      context: ./app-dai
      dockerfile: Dockerfile
    expose:
      - "7070"  # interne
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/biasbinder_db?currentSchema=biasbinder_bst
      - SPRING_DATASOURCE_USERNAME=biasbinder_dev
      - SPRING_DATASOURCE_PASSWORD=biasbinder
    depends_on:
      - db
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=7070"
      - "traefik.http.routers.api.priority=2"

      # (Optionnel) Middleware CORS
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.api-cors.headers.accessControlMaxAge=100"
      - "traefik.http.middlewares.api-cors.headers.addVaryHeader=true"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=*"
      - "traefik.http.routers.api.middlewares=api-cors"

  ###################################################################
  # FRONTEND (React Dev Server) - Publie directement sur :5173
  ###################################################################
  frontend:
    build:
      context: ./biasfinder-frontend
      dockerfile: Dockerfile
    # Au lieu d'expose, on ouvre directement le port:
    ports:
      - "5173:5173"
    networks:
      - my_network
    # AUCUN label Traefik => on ne passe pas par le reverse-proxy

  ###################################################################
  # BASE DE DONNÉES (Postgres)
  ###################################################################
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=biasbinder_dev
      - POSTGRES_PASSWORD=biasbinder
      - POSTGRES_DB=biasbinder_db
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - my_network
    # Pas exposé en HTTP, donc pas de label Traefik

networks:
  my_network:
    driver: bridge

volumes:
  db_data:
