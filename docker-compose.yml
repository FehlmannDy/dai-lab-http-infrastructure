version: "3.9"

services:
  ################################################################
  # TRAEFIK (reverse proxy)
  ################################################################
  reverse_proxy:
    image: traefik:v2.11
    container_name: traefik
    ports:
      - "80:80"     # Traefik écoute le traffic HTTP externe sur localhost
      - "8080:8080" # Pour accéder au dashboard Traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # Le dashboard en mode "insecure", accessible sur http://localhost:8080
      - "--api.insecure=true"
      - "--api.dashboard=true"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - my_network

  ################################################################
  # POSTGRESQL
  ################################################################
  db:
    image: postgres:15
    # ou bien ton Dockerfile si tu as un Dockerfile personnalisé
    environment:
      - POSTGRES_USER=biasbinder_dev
      - POSTGRES_PASSWORD=biasbinder
      - POSTGRES_DB=biasbinder_db
    expose:
      - "5432"  # accessible seulement dans le réseau docker
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - my_network
    # Pas de labels traefik (pas besoin d'y accéder en HTTP)

  ################################################################
  # BACKEND (Spring Boot + Javalin)
  ################################################################
  api:
    build:
      context: ./app-dai
      dockerfile: Dockerfile
    # OU bien image: mon-registry/mon-backend:latest
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/biasbinder_db
      - SPRING_DATASOURCE_USERNAME=biasbinder_dev
      - SPRING_DATASOURCE_PASSWORD=biasbinder
    depends_on:
      - db
    expose:
      - "7070"  # le port interne sur lequel l'API écoute
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      # Route qui match /api → on envoie au backend
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=7070"
      # On monte la priorité pour que /api ne soit pas "caché" par la route /
      - "traefik.http.routers.api.priority=2"

      # (Facultatif) Si tu veux retirer "/api" avant que ça n'arrive à ton code:
      # - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      # - "traefik.http.routers.api.middlewares=strip-api"

  ################################################################
  # FRONTEND (React)
  ################################################################
  frontend:
    build:
      context: ./biasfinder-frontend
      dockerfile: Dockerfile
    # depends_on si tu as besoin d'attendre que l'API soit ready
    expose:
      - "5173" # si ton serveur React local écoute sur 5173
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      # Tout ce qui n'est pas /api ira ici, c-à-d PathPrefix("/")
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      # On met une priority plus faible, pour que /api prenne le dessus quand c'est /api
      - "traefik.http.routers.frontend.priority=1"

volumes:
  db_data:

networks:
  my_network:
    driver: bridge
