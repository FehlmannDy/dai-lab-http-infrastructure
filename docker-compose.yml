version: "3.9"

networks:
  biasbinder_network:
    driver: bridge

volumes:
  db_data:

services:
  ###################################################################
  # BASE DE DONNÉES PostgreSQL
  ###################################################################
  db:
    # Soit tu as un Dockerfile personnalisé pour init la DB, etc.
    build:
      context: ./project-fehlmann_halimi_stelcher
      dockerfile: Dockerfile
    container_name: biasbinder_db_container
    environment:
      - POSTGRESQL_USERNAME=biasbinder_dev
      - POSTGRESQL_PASSWORD=biasbinder
      - POSTGRESQL_DATABASE=biasbinder_db
    # Si tu veux accéder à la DB depuis l'extérieur (pour dev), tu peux mettre :
    # ports:
    #   - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - biasbinder_network

  ###################################################################
  # API (Spring Boot + Javalin) - Reverse-proxifiée par Traefik + DB
  ###################################################################
  api:
    build:
      # path vers ton code Java
      context: ./app-dai
      dockerfile: Dockerfile
    container_name: biasbinder_backend
    environment:
      # On pointe la DB via le hostname "db" (même réseau Docker)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/biasbinder_db?currentSchema=biasbinder_bst
      - SPRING_DATASOURCE_USERNAME=biasbinder_dev
      - SPRING_DATASOURCE_PASSWORD=biasbinder
    # On n'ouvre pas 7070 vers l'extérieur, on laisse Traefik faire le routage
    expose:
      - "7070"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - biasbinder_network
    labels:
      - "traefik.enable=true"
      # Route /api => conteneur "api" (port 7070)
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=7070"
      - "traefik.http.routers.api.priority=2"

      # (Optionnel) CORS
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.api-cors.headers.accessControlMaxAge=100"
      - "traefik.http.middlewares.api-cors.headers.addVaryHeader=true"
      - "traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=*"
      - "traefik.http.routers.api.middlewares=api-cors"

  ###################################################################
  # FRONTEND (React) - direct sur 5173
  ###################################################################
  frontend:
    build:
      context: ./biasfinder-frontend
      dockerfile: Dockerfile
    container_name: biasbinder_frontend
    # On publie 5173:5173 pour accéder à React en direct
    ports:
      - "5173:5173"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - biasbinder_network
    # PAS de label Traefik => on n'expose pas le front via Traefik
    # tu continues à accéder à http://localhost:5173

  ###################################################################
  # SERVEUR STATIQUE (Nginx) - route "/" via Traefik
  ###################################################################
  static_server:
    build:
      context: ./static_server
      dockerfile: Dockerfile
    container_name: static_server_container
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - biasbinder_network
    labels:
      - "traefik.enable=true"
      # Tout ce qui n'est pas /api va ici
      - "traefik.http.routers.static.rule=PathPrefix(`/`)"
      - "traefik.http.routers.static.entrypoints=web"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      - "traefik.http.routers.static.priority=1"

  ###################################################################
  # TRAEFIK (Reverse Proxy pour / et /api)
  ###################################################################
  reverse-proxy:
    container_name: traefik
    image: traefik:v2.11
    ports:
      - "80:80"      # HTTP
      - "8080:8080"  # Dashboard
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - biasbinder_network
    labels:
      - "traefik.enable=true"
      # Dashboard accessible sur http://localhost:8080 (pas besoin de label)

